var S=Object.defineProperty;var v=(c,e,t)=>e in c?S(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t;var i=(c,e,t)=>(v(c,typeof e!="symbol"?e+"":e,t),t);function d(c){if(!c)throw new Error("Parent element is required");const e=c.querySelector('[name="__RequestVerificationToken"]'),t=e?e.value:null;return t||(console.error("RequestVerificationToken is missing from the form"),"")}function l(c,e,t,s){const n=c.querySelector(e);if(!n)throw console.log(`No elements found for selector: ${e}`),new Error(`${e} was not found`);return t&&n.addEventListener(t.eventType,a=>t.eventFunction(a)),s&&s(),n}function L(c,e,t,s){const n=Array.from(c.querySelectorAll(e));if(!n)throw console.log(`No elements found for selector: ${e}`),new Error(`${e} was not found`);return t&&n.forEach(a=>{a.addEventListener(t.eventType,h=>t.eventFunction(h)),s&&s()}),n}function p(c,e){if(c.preventDefault(),c.stopPropagation(),!e)return null;const t=e[0].checked;var s=e.map(n=>(n.checked=!t,n));return s}function k(){window.location.reload()}class D{constructor(){i(this,"formId","frmLinksSearch");i(this,"frmSearchLinks");i(this,"chkSearchIsActive");i(this,"chkSearchIsDeleted");i(this,"chkSearchIsFlagged");i(this,"txtSearchDomain");i(this,"txtSearchText");i(this,"txtSearchTags");i(this,"btnSearch");i(this,"btnClear");i(this,"onChkChanged",e=>{const t=e.target;t&&(t.value=t.checked?"true":"false")});i(this,"handleSearchButtonClick",e=>{e.preventDefault(),e.stopPropagation();const t=`/links?term=${this.txtSearchText.value}&tags=${this.txtSearchTags.value}&domain=${this.txtSearchDomain.value}&isActive=${this.chkSearchIsActive.value}&isFlagged=${this.chkSearchIsFlagged.value}&isDeleted=${this.chkSearchIsDeleted.value}`;window.location.href=t});i(this,"handleClearButtonClick",e=>{const t="/links";window.location.href=t});this.initForm()}initForm(){this.frmSearchLinks=l(document,`#${this.formId}`),this.chkSearchIsActive=l(this.frmSearchLinks,"#chk-is-active",{eventType:"change",eventFunction:this.onChkChanged}),this.chkSearchIsActive.value=this.chkSearchIsActive.checked?"true":"false",this.chkSearchIsDeleted=l(this.frmSearchLinks,"#chk-is-deleted",{eventType:"change",eventFunction:this.onChkChanged}),this.chkSearchIsDeleted.value=this.chkSearchIsDeleted.checked?"true":"false",this.chkSearchIsFlagged=l(this.frmSearchLinks,"#chk-is-flagged",{eventType:"change",eventFunction:this.onChkChanged}),this.chkSearchIsFlagged.value=this.chkSearchIsFlagged.checked?"true":"false",this.txtSearchDomain=l(this.frmSearchLinks,"#txt-domain"),this.txtSearchText=l(this.frmSearchLinks,"#txt-term"),this.txtSearchTags=l(this.frmSearchLinks," #txt-tags"),this.btnSearch=l(this.frmSearchLinks,"#btn-search",{eventType:"click",eventFunction:this.handleSearchButtonClick}),this.btnClear=l(this.frmSearchLinks,"#btn-clear",{eventType:"click",eventFunction:this.handleClearButtonClick})}}class f{async apiRequest(e,t,s=null,n=null,a=null){const h=new Headers;if(h.append("Content-Type","application/json"),a&&a.length>0&&h.append("RequestVerificationToken",a),n){const r=new URLSearchParams(n).toString();t+=`?${r}`}let m=s?JSON.stringify(s):null;try{const r=await fetch(t,{method:e,headers:h,body:m}),g=r.headers.get("Content-Type");if(g&&g.includes("application/json")){const u=await r.json();return this.isApiDataResponse(u)?u:{isSuccess:r.ok,message:r.ok?null:`${r.status} ${r.statusText}`}}else return{isSuccess:r.ok,message:r.ok?null:`${r.status} ${r.statusText}`}}catch(r){return{isSuccess:!1,message:`API request failed: ${r.message}`}}}isApiDataResponse(e){const t=e;return((t==null?void 0:t.data)??null)!==null}async get(e,t){return this.apiRequest("GET",e,null,t)}async post(e,t,s){return this.apiRequest("POST",e,t,null,s)}async patch(e,t,s){return this.apiRequest("PATCH",e,t,null,s)}async put(e,t,s){return this.apiRequest("PUT",e,t,null,s)}async delete(e,t,s){return this.apiRequest("DELETE",e,t,null,s)}async deletes(e,t,s){return this.apiRequest("DELETE",e,t,null,s)}}class A extends f{async deleteLinksAsync(e,t,s,n){return(!e||e.length===0)&&n("No ids provided"),this.deletes("/links/deletes",e,t).then(a=>{a.isSuccess?s(a):n(a)}).catch(a=>n(a))}}class C{constructor(){i(this,"pageContainer");i(this,"searchLinksForm");i(this,"deleteLinksForm");i(this,"deleteLinksButton");i(this,"selectAllLinksButton");i(this,"linksTable");i(this,"linkCheckBoxes",[]);i(this,"linksApis",new A);i(this,"handleOnSingleCheckBoxClicked",e=>{this.toggleDeleteButtonDisabledState()});i(this,"handleOnSelectAllCheckboxesClicked",e=>{e.preventDefault(),e.stopPropagation(),p(e,this.linkCheckBoxes),this.toggleDeleteButtonDisabledState()});i(this,"handleOnDeleteButtonClicked",e=>{e.preventDefault(),e.stopPropagation();const t=d(this.deleteLinksForm);let n=(this.linkCheckBoxes.filter(a=>a.checked)??[]).map(a=>{if(a.dataset.id&&a.dataset.id!==void 0)return a.dataset.id})??[];confirm("Are you sure you want to delete the selected links?")&&this.linksApis.deleteLinksAsync(n,t,this.onDeleteLinksSuccess,this.onDeleteLinksFailure)});i(this,"onDeleteLinksSuccess",e=>{if(e.isSuccess)if(e.data){const t=e.data,s=t.length===1?t[0]:t.join(", ");alert(`The following links were deleted: ${s}`),k()}else alert("It seems that no links were deleted");else alert(e.message??"An error occurred while deleting the links")});i(this,"onDeleteLinksFailure",e=>{throw console.error(e),e});if(!document.querySelector("#links-list-container"))throw console.error("Unable to find the page"),new Error("Unable to find the page");this.initForm()}toggleDeleteButtonDisabledState(){this.deleteLinksButton.disabled=(this.linkCheckBoxes.find(e=>e.checked)??null)===null}initDeleteLinksForm(){const e="frmLinksDelete";this.deleteLinksForm=l(document,`#${e}`),this.deleteLinksButton=this.deleteLinksButton=l(this.deleteLinksForm,"#btnDeleteLinks",{eventType:"click",eventFunction:this.handleOnDeleteButtonClicked}),this.toggleDeleteButtonDisabledState(),this.selectAllLinksButton=l(this.deleteLinksForm,"#btnSelectLinks",{eventType:"click",eventFunction:this.handleOnSelectAllCheckboxesClicked})}initForm(){this.pageContainer=l(document,"#links-list-container"),this.searchLinksForm=new D,this.linksTable=l(this.pageContainer,"#links-table"),this.linkCheckBoxes=L(this.linksTable,'input[name="selected-link"]',{eventType:"click",eventFunction:this.handleOnSingleCheckBoxClicked}),this.initDeleteLinksForm()}}function b(c){if(!c)return{isSuccess:!0,message:""};const e=Array.from(c).filter(n=>n.hasAttribute("required")&&n.tagName.toLowerCase()!=="button");let t=!1,s="";return e?(e&&e.forEach(n=>{n.checkValidity()?n.classList.remove("is-invalid"):(t=!0,n.classList.add("is-invalid"),s+=`<li>${n.name} is required</li>`)}),t&&(s=`<ul>${s}</ul>`),{isSuccess:!t,message:s}):{isSuccess:!0,message:""}}const o="An error occurred while deleting the links";class y extends f{async updateLinkAsync(e,t,s,n){return e.linkId&&console.log("Cannot update Link: No id was provided"),JSON.stringify(e),this.post(`/links/${e.linkId}/edit`,e,t).then(a=>{a.isSuccess?s(a):n(a.message??o)}).catch(a=>n(a))}async activateLinkAsync(e,t,s,n,a){return e!=null&&e.trim()||a("No id was provided"),this.post(`/links/${e}/activate/${s}`,null,t).then(h=>{h.isSuccess?n(h):a(h.message??o)}).catch(h=>a(h))}async deleteLinkAsync(e,t,s,n){return e!=null&&e.trim()||n("No id was provided"),this.delete(`/links/${e}/delete`,t).then(a=>{a.isSuccess?s(a):n(a.message??o)}).catch(a=>n(a))}async unDeleteLinkAsync(e,t,s,n){return e!=null&&e.trim()||n("No id was provided"),this.post(`/links/${e}/undelete`,null,t).then(a=>{a.isSuccess?s({isSuccess:!0,message:`The link '${e} was Undeleted successfully'`}):n(a.message??o)}).catch(a=>n(a))}}class x{constructor(e){i(this,"formId","frmEditLink");i(this,"linkId","");i(this,"isActive",!1);i(this,"isDeleted",!1);i(this,"isFlagged",!1);i(this,"frmEditLink");i(this,"txtLinkTitle");i(this,"txtLinkDescription");i(this,"txtLinkDomain");i(this,"txtLinkTags");i(this,"txtLinkUrl");i(this,"btnSave");i(this,"btnActivate");i(this,"btnDelete");i(this,"btnCancel");i(this,"onEditChangedCallback");i(this,"linkApis",new y);i(this,"setActiveButtonState",e=>{e?(this.btnActivate.textContent="Deactivate",this.btnActivate.classList.add("btn-secondary")):(this.btnActivate.textContent="Activate",this.btnActivate.classList.remove("btn-secondary"))});i(this,"handleOnActivateClick",e=>{const t=!this.isActive,s=d(this.frmEditLink);this.linkApis.activateLinkAsync(this.linkId,s,t,this.onActivateSuccess,this.onActivateFailure),this.isActive=t,this.setActiveButtonState(t)});i(this,"onActivateSuccess",e=>{e.isSuccess?(this.isActive=!this.isActive,this.setActiveButtonState(this.isActive),this.isActive?this.handleOnEditChanged(!0,e.message,"Activate"):this.handleOnEditChanged(!0,e.message,"Deactivate")):console.log("Ooops, how did we get here?")});i(this,"onActivateFailure",e=>{console.error(e??"An error occurred while trying to set the active state of the link"),this.handleOnEditChanged(!1,e.toString(),"Deactivate")});i(this,"setDeleteButtonState",e=>{e?(this.btnDelete.textContent="UnDelete",this.btnDelete.classList.remove("btn-danger"),this.btnDelete.classList.add("btn-secondary")):(this.btnDelete.textContent="Delete",this.btnDelete.classList.remove("btn-secondary"),this.btnDelete.classList.add("btn-danger"))});i(this,"handleOnDeleteClick",e=>{e.preventDefault(),e.stopPropagation();const t=!this.isDeleted,s=d(this.frmEditLink);this.isDeleted=t,t?this.linkApis.deleteLinkAsync(this.linkId,s,this.handleOnDeleteSuccess,this.handleOnDeleteFail):this.linkApis.unDeleteLinkAsync(this.linkId,s,this.handleOnUnDeleteSuccess,this.handleOnUnDeleteFail)});i(this,"handleOnDeleteSuccess",e=>{e.isSuccess&&(this.isDeleted=!1,this.setDeleteButtonState(this.isDeleted),this.handleOnEditChanged(!0,e.message,"Delete"))});i(this,"handleOnDeleteFail",e=>{console.error(e??"An error occurred while trying to undelete the link"),this.handleOnEditChanged(!1,e.toString(),"Delete")});i(this,"handleOnUnDeleteSuccess",e=>{e.isSuccess&&(this.isDeleted=!1,this.setDeleteButtonState(this.isDeleted),this.handleOnEditChanged(!0,e.message,"Undelete"))});i(this,"handleOnUnDeleteFail",e=>{console.error(e??"An error occurred while trying to undelete the link"),this.handleOnEditChanged(!1,e.toString(),"Undelete")});i(this,"handleOnSaveClick",e=>{e.preventDefault(),e.stopPropagation();const t=b(this.frmEditLink.elements);if(!(t!=null&&t.isSuccess))return;const s=d(this.frmEditLink),n={linkId:this.linkId,title:this.txtLinkTitle.value,description:this.txtLinkDescription.value,domain:this.txtLinkDomain.value,tags:this.txtLinkTags.value?this.txtLinkTags.value.split(",").map(function(a){return a.trim()}):[]};this.linkApis.updateLinkAsync(n,s,this.handleOnSubmitLinkSuccess,this.handleOnSubmitLinkFail)});i(this,"handleOnSubmitLinkSuccess",e=>{this.handleOnEditChanged(e.isSuccess,e.message,"Undelete")});i(this,"handleOnSubmitLinkFail",e=>{this.handleOnEditChanged(!1,e.message??"And error occurred while trying to Save the link","Save")});i(this,"handleOnEditChanged",(e,t,s)=>{this.onEditChangedCallback&&this.onEditChangedCallback({isSuccess:e,message:t,eventType:s})});i(this,"handleOnCancelClick",e=>{k()});this.initForm(e)}initForm(e){if(this.frmEditLink=l(document,`#${this.formId}`),this.frmEditLink.getAttribute("data-link-id"))this.linkId=this.frmEditLink.getAttribute("data-link-id");else throw console.log("The form does not have a data-link-id attribute"),new Error("The form does not have a data-link-id attribute");this.isActive=this.frmEditLink.getAttribute("data-isactive")==="true",this.isDeleted=this.frmEditLink.getAttribute("data-isdeleted")==="true",this.isFlagged=this.frmEditLink.getAttribute("data-isflagged")==="true",this.txtLinkTitle=l(this.frmEditLink,"#title"),this.txtLinkDescription=l(this.frmEditLink,"#description"),this.txtLinkDomain=l(this.frmEditLink,"#domain"),this.txtLinkTags=l(this.frmEditLink,"#tags"),this.txtLinkUrl=l(this.frmEditLink,"#url"),this.btnActivate=l(this.frmEditLink,"#btnActivate",{eventType:"click",eventFunction:this.handleOnActivateClick}),this.setActiveButtonState(this.isActive),this.btnDelete=l(this.frmEditLink,"#btnDelete",{eventType:"click",eventFunction:this.handleOnDeleteClick}),this.setDeleteButtonState(this.isDeleted),this.btnCancel=l(this.frmEditLink,"#btnCancel",{eventType:"click",eventFunction:this.handleOnCancelClick}),this.btnSave=l(this.frmEditLink,"#btnSave",{eventType:"click",eventFunction:this.handleOnSaveClick}),this.onEditChangedCallback=e??null}}class T{constructor(){i(this,"panel");i(this,"imgLinkImage");i(this,"txtDateSubmitted");i(this,"txtDateUpdated");i(this,"txtSubmittedBy");i(this,"txtCountLikes");i(this,"txtCountSaves");i(this,"txtMetaKeywords");i(this,"cleanseImage",e=>{if(!e)return;const t="/imgs/no-image-found.png";let s="";if(!e.src||!e.getAttribute("data-src")){e.setAttribute("src",t),e.alt="Image has no src or data-src";return}const n=e.getAttribute("data-src")??"";n.startsWith("http")&&(n.indexOf("duckduckgo")>=0?s="/imgs/duckduckgo-logo.jpg":n.indexOf("google")>=0?s="/imgs/google-logo.jpg":n.indexOf("reddit")>=0?s="/imgs/reddit-logo.png":s=n);try{e.setAttribute("src",s)}catch(a){console.error(`Error loading image from ${n}
${a}`),e.setAttribute("src",t)}});this.initForm()}initForm(){this.panel=l(document,"#link-meta-details"),this.imgLinkImage=l(this.panel,"#link-image"),this.txtDateSubmitted=l(this.panel,"#date-submitted"),this.txtDateUpdated=l(this.panel,"#date-updated"),this.txtSubmittedBy=l(this.panel,"#submitted-by"),this.txtCountLikes=l(this.panel,"#likes"),this.txtCountSaves=l(this.panel,"#saves"),this.txtMetaKeywords=l(this.panel,"#keywords"),this.cleanseImage(this.imgLinkImage)}}class w{constructor(){i(this,"editLinkForm");i(this,"messagePanel");i(this,"metaPanel");i(this,"pageContainer");i(this,"handleOnEditChanged",e=>{e.isSuccess?confirm(e.message??"Updated successfully")&&k():alert(e.message??"An error occurred")});if(!document.getElementById("links-edit-container"))throw console.error("Unable to find the edit link page"),new Error("Unable to find the edit link page");this.initForm()}initForm(){this.pageContainer=l(document,"#links-edit-container"),this.editLinkForm=new x(this.handleOnEditChanged),this.messagePanel=l(this.pageContainer,"#message"),this.metaPanel=new T}}function E(){document.querySelector("#links-list-container")?new C:document.querySelector("#links-edit-container")&&new w}document.addEventListener("DOMContentLoaded",()=>{E()});
//# sourceMappingURL=links.mjs.map
