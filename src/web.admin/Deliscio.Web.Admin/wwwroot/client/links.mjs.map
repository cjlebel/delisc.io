{"version":3,"file":"links.mjs","sources":["../tsx/utils/dom/get-antiforgery-token.ts","../tsx/utils/dom/init-element.ts","../tsx/utils/dom/toggle-checkboxes.ts","../tsx/utils/window/window-reload.ts","../tsx/pages/Links/LinksPage/components/_links-search-form.tsx","../tsx/apis/api-helpers-async.ts","../tsx/pages/Links/LinksPage/apis/index.ts","../tsx/pages/Links/LinksPage/LinksPage.tsx","../tsx/utils/dom/validate-form.ts","../tsx/pages/Links/LinkDetailsPage/apis/index.ts","../tsx/pages/Links/LinkDetailsPage/components/_link-edit-form.ts","../tsx/pages/Links/LinkDetailsPage/components/_link-meta-panel.ts","../tsx/pages/Links/LinkDetailsPage/LinkDetailsPage.tsx","../tsx/pages/Links/index.ts"],"sourcesContent":["export function getAntiForgeryToken(parent: Element): string {\r\n    if (!parent)\r\n        throw new Error('Parent element is required');\r\n\r\n   const antiForgeryInput = parent.querySelector(\r\n      '[name=\"__RequestVerificationToken\"]'\r\n   ) as HTMLInputElement;\r\n\r\n    const antiForgeryToken = antiForgeryInput ? antiForgeryInput.value : null;\r\n\r\n    if (!antiForgeryToken) {\r\n      console.error('RequestVerificationToken is missing from the form');\r\n      //throw new Error('RequestVerificationToken is missing from the form');\r\n      return '';\r\n   }\r\n\r\n    return antiForgeryToken;\r\n}\r\n","/**\r\n * Initializes an element as type T with an optional event handler\r\n * @param parent The parent HTMLElement (not selector) that this element is a child of\r\n * @param selector The selector for the element that is to be initialized\r\n * @param eventHandler What to do when an event happens with this element\r\n * @returns The element as type T if defined. If not, then as plain ol' boring HTMLELement\r\n */\r\nexport function initElement<T extends HTMLElement>(\r\n    parent: HTMLElement | Document,\r\n    selector: string,\r\n    elementEvent?: ElementEvent | undefined,\r\n    callBack?: Function | undefined\r\n): T {\r\n    const element = parent.querySelector(selector) as T;\r\n\r\n    if (!element) {\r\n        console.log(`No elements found for selector: ${selector}`);\r\n        throw new Error(`${selector} was not found`);\r\n    }\r\n\r\n    if (elementEvent)\r\n        element.addEventListener(elementEvent.eventType, (e)=> elementEvent.eventFunction(e));\r\n\r\n    if (callBack)\r\n        callBack();\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Initializes an array of elements as type T with an optional event handler\r\n * @param parent The parent HTMLElement (not selector) that this element is a child of\r\n * @param selector The selector for the element that is to be initialized\r\n * @param elementEvent What to do when an event happens with this element\r\n * @returns An array of elements as type T ifs defined. If not, then as plain ol' boring HTMLELement\r\n */\r\nexport function initElements<T extends HTMLElement>(\r\n    parent: HTMLElement | Document,\r\n    selector: string,\r\n    elementEvent?: ElementEvent | undefined,\r\n    callBack?: Function | undefined\r\n): T[] {\r\n    const elements = Array.from<T>(parent.querySelectorAll(selector));\r\n\r\n    if (!elements) {\r\n        console.log(`No elements found for selector: ${selector}`);\r\n        throw new Error(`${selector} was not found`);\r\n    }\r\n\r\n    if (elementEvent)\r\n        elements.forEach((element: T) => {\r\n            element.addEventListener(elementEvent.eventType, (e) => elementEvent.eventFunction(e));\r\n\r\n            if (callBack)\r\n                callBack();\r\n            });\r\n\r\n    return elements;\r\n}\r\n\r\nexport type ElementEvent = { eventType: string, eventFunction: Function };","/**\r\n * Toggles all checkboxes with the given selector.\r\n * @param checkBoxes The collection of checkboxes to toggle.\r\n * @returns All of the checkboxes are returned with their new state\r\n */\r\nexport function toggleCheckboxes(\r\n   e: Event,\r\n   checkBoxes: HTMLInputElement[]\r\n): HTMLInputElement[] | null {\r\n   e.preventDefault();\r\n   e.stopPropagation();\r\n\r\n   if (!checkBoxes) return null;\r\n\r\n   // Look at the first one to determine if we should select or deselect all of them\r\n   const doSelected = checkBoxes[0].checked;\r\n\r\n   var toggledCheckboxes = checkBoxes.map((checkBox: HTMLInputElement) => {\r\n      (checkBox as HTMLInputElement).checked = !doSelected;\r\n\r\n      return checkBox;\r\n   });\r\n\r\n   return toggledCheckboxes;\r\n}\r\n","/**\r\n * Helper to reload the current page\r\n */\r\nexport default function WindowReload() {\r\n    window.location.reload();\r\n}","import { initElement, ElementEvent } from '@utils/dom/init-element';\r\n\r\nexport class SearchLinksForm {\r\n    formId = 'frmLinksSearch';\r\n\r\n    // Elements\r\n    // Note: Because I'm checking/throwing errors if the elements are not found,\r\n    // I'm using the non-null assertion operator (!) to say that they will not be null.\r\n    frmSearchLinks!: HTMLFormElement;\r\n\r\n    chkSearchIsActive!: HTMLInputElement;\r\n    chkSearchIsDeleted!: HTMLInputElement;\r\n    chkSearchIsFlagged!: HTMLInputElement;\r\n\r\n    txtSearchDomain!: HTMLInputElement;\r\n    txtSearchText!: HTMLInputElement;\r\n    txtSearchTags!: HTMLInputElement;\r\n\r\n    btnSearch!: HTMLButtonElement;\r\n    btnClear!: HTMLButtonElement;\r\n\r\n    constructor() {\r\n        this.initForm();\r\n    }\r\n\r\n    /**\r\n     * Initialize the elements in the search form\r\n     */\r\n    private initForm(): void {\r\n        this.frmSearchLinks = initElement<HTMLFormElement>(document, `#${this.formId}`)!;\r\n\r\n        // Is Active checkbox\r\n        this.chkSearchIsActive = initElement<HTMLInputElement>(\r\n            this.frmSearchLinks,\r\n            '#chk-is-active',\r\n            { eventType: 'change', eventFunction: this.onChkChanged } as ElementEvent\r\n        );\r\n        this.chkSearchIsActive.value = this.chkSearchIsActive.checked ? 'true' : 'false';\r\n\r\n        // Is Deleted checkbox\r\n        this.chkSearchIsDeleted = initElement<HTMLInputElement>(\r\n            this.frmSearchLinks,\r\n            '#chk-is-deleted',\r\n            { eventType: 'change', eventFunction: this.onChkChanged } as ElementEvent\r\n        );\r\n        this.chkSearchIsDeleted.value = this.chkSearchIsDeleted.checked ? 'true' : 'false';\r\n\r\n        // Is Flagged checkbox\r\n        this.chkSearchIsFlagged = initElement<HTMLInputElement>(\r\n            this.frmSearchLinks,\r\n            '#chk-is-flagged',\r\n            { eventType: 'change', eventFunction: this.onChkChanged } as ElementEvent\r\n        );\r\n        this.chkSearchIsFlagged.value = this.chkSearchIsFlagged.checked ? 'true' : 'false';\r\n\r\n\r\n        this.txtSearchDomain = initElement<HTMLInputElement>(this.frmSearchLinks, '#txt-domain')!;\r\n\r\n        this.txtSearchText = initElement<HTMLInputElement>(this.frmSearchLinks, '#txt-term')!;\r\n\r\n        this.txtSearchTags = initElement<HTMLInputElement>(this.frmSearchLinks, ' #txt-tags')!;\r\n\r\n        this.btnSearch = initElement<HTMLButtonElement>(\r\n            this.frmSearchLinks,\r\n            '#btn-search',\r\n            { eventType: 'click', eventFunction: this.handleSearchButtonClick } as ElementEvent\r\n        )!;\r\n\r\n        this.btnClear = initElement<HTMLButtonElement>(\r\n            this.frmSearchLinks,\r\n            '#btn-clear',\r\n            { eventType: 'click', eventFunction: this.handleClearButtonClick } as ElementEvent\r\n        )!;\r\n    }\r\n\r\n    /**\r\n     * Handles when any of the checkboxes value changes.\r\n     * @param e The Event\r\n     */\r\n    private onChkChanged = (e: Event) => {\r\n        const target = e.target as HTMLInputElement | null;\r\n        if (target) {\r\n            target.value = target.checked ? 'true' : 'false';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles when the Search button was clicked.\r\n     * This does NOT post the form, but instead constructs the URL and redirects the user to it.\r\n     * @param e The Event\r\n     */\r\n    handleSearchButtonClick = (e: Event) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const url = `/links?term=${this.txtSearchText.value}&tags=${this.txtSearchTags.value}&domain=${this.txtSearchDomain.value}&isActive=${this.chkSearchIsActive.value}&isFlagged=${this.chkSearchIsFlagged.value}&isDeleted=${this.chkSearchIsDeleted.value}`;\r\n\r\n        window.location.href = url;\r\n    };\r\n\r\n    handleClearButtonClick = (e: Event) => {\r\n        const url = '/links';\r\n\r\n        window.location.href = url;\r\n    }\r\n}\r\n","import { ApiResponse, ApiDataResponse } from './api-response';\r\n\r\n/**\r\n * Define a union type for the HTTP methods\r\n */\r\ntype HttpMethod = 'GET' | 'PATCH' | 'POST' | 'PUT' | 'DELETE';\r\n\r\n/**\r\n * API Helper class for making API requests\r\n */\r\nclass ApiHelper {\r\n    /**\r\n     * Helper function to make API requests\r\n     * @param {HttpMethod} method - The HTTP method (GET, POST, PUT, DELETE)\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {Object} data - The data to be sent in the request body\r\n     * @param {Object} params - Query parameters (for GET)\r\n     * @returns {Promise<any>} - Promise that resolves with the API response object\r\n     */\r\n    private async apiRequest<T extends ApiResponse | ApiDataResponse<any>>(\r\n        method: HttpMethod,\r\n        url: string,\r\n        data: any = null,\r\n        params: any = null,\r\n        antiForgeryToken: string | null = null\r\n    ): Promise<T> {\r\n        const headers: HeadersInit = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        if (antiForgeryToken && antiForgeryToken.length > 0) {\r\n            headers.append('RequestVerificationToken', antiForgeryToken);\r\n        }\r\n\r\n        if (params) {\r\n            const queryParams = new URLSearchParams(params).toString();\r\n            url += `?${queryParams}`;\r\n        }\r\n\r\n        let bodyData = data ? JSON.stringify(data) : null;\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                headers,\r\n                body: bodyData,\r\n            });\r\n\r\n            const contentType = response.headers.get('Content-Type');\r\n            const isJson = contentType && contentType.includes('application/json');\r\n\r\n            if (isJson) {\r\n                const responseData = await response.json();\r\n\r\n                if (this.isApiDataResponse<T>(responseData)) {\r\n\r\n                    return responseData as T;\r\n\r\n                } else {\r\n                    const apiResponse = {\r\n                        isSuccess: response.ok,\r\n                        message: response.ok ? null : `${response.status} ${response.statusText}`,\r\n                    } as T;\r\n\r\n                    return apiResponse;\r\n                }\r\n            } else {\r\n                const apiResponse = {\r\n                    isSuccess: response.ok,\r\n                    message: response.ok ? null : `${response.status} ${response.statusText}`,\r\n                } as T;\r\n\r\n                return apiResponse;\r\n\r\n                //return {\r\n                //    isSuccess: response.ok,\r\n                //    message: response.ok ? null : `${response.status} ${response.statusText}`,\r\n                //} as T;\r\n                //if (this.isApiDataResponse<T>(null)) {\r\n                //    return {\r\n                //        isSuccess: response.ok,\r\n                //        message: response.ok\r\n                //            ? null\r\n                //            : `${response.status} ${response.statusText}. Expected JSON response.`,\r\n                //        data: null,\r\n                //    } as T;\r\n                //} else {\r\n                //    return {\r\n                //        isSuccess: response.ok,\r\n                //        message: response.ok ? null : `${response.status} ${response.statusText}`,\r\n                //    } as T;\r\n                //}\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                isSuccess: false,\r\n                message: `API request failed: ${(error as Error).message}`,\r\n            } as T;\r\n        }\r\n    }\r\n\r\n    private isApiDataResponse<T>(value: any): value is ApiDataResponse<T> {\r\n        const val = value as ApiDataResponse<T>;\r\n        const data = val?.data ?? null\r\n\r\n        const isOfTypeT = data !== null;\r\n\r\n        return isOfTypeT;\r\n    }\r\n\r\n    /**\r\n     * Helper function for GET requests\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {Object} params - Query parameters\r\n     * @returns {Promise<T>} - Promise that resolves with the API response object\r\n     */\r\n    public async get<T extends ApiDataResponse<any>>(\r\n        url: string,\r\n        params?: any\r\n    ): Promise<T> {\r\n        return this.apiRequest<T>('GET', url, null, params);\r\n    }\r\n\r\n    /**\r\n     * Helper function for POST requests\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {Object} data - The data to be sent in the request body\r\n     * @returns {Promise<any>} - Promise that resolves with the API response object\r\n     */\r\n    public async post<T extends ApiResponse | ApiDataResponse<any>>(\r\n        url: string,\r\n        data: any,\r\n        antiForgeryToken?: string | null\r\n    ): Promise<T> {\r\n        return this.apiRequest<T>('POST', url, data, null, antiForgeryToken);\r\n    }\r\n\r\n    /**\r\n     * Helper function for PATCH requests\r\n     * NOTE: PATCH requests update a small piece of data on the server\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {Object} data - The data to be sent in the request body\r\n     * @returns {Promise<ApiResponse | ApiDataResponse<any>>} - Promise that resolves with the API response object\r\n     */\r\n    public async patch<T extends ApiResponse>(\r\n        url: string,\r\n        data: any,\r\n        antiForgeryToken?: string | null\r\n    ): Promise<T> {\r\n        return this.apiRequest<T>('PATCH', url, data, null, antiForgeryToken);\r\n    }\r\n\r\n    /**\r\n     * Helper function for PUT requests\r\n     * NOTE: PUT requests will update existing data if it exists, or create new data if it does not\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {Object} data - The data to be sent in the request body\r\n     * @returns {Promise<any>} - Promise that resolves with the API response object\r\n     */\r\n    public async put<T extends ApiResponse>(\r\n        url: string,\r\n        data: any,\r\n        antiForgeryToken?: string | null\r\n    ): Promise<T> {\r\n        return this.apiRequest<T>('PUT', url, data, null, antiForgeryToken);\r\n    }\r\n\r\n    /**\r\n     * Helper function for DELETE requests, to delete a single record\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {string} antiForgeryToken - The anti-forgery token to be sent in the request header (if applicable)\r\n     * @returns {Promise<any>} - Promise that resolves with the API response object\r\n     */\r\n    public async delete<T extends ApiResponse>(\r\n        url: string,\r\n        data: any,\r\n        antiForgeryToken?: string | null\r\n    ): Promise<T> {\r\n        return this.apiRequest<T>('DELETE', url, data, null, antiForgeryToken);\r\n    }\r\n\r\n    /**\r\n     * Helper function for DELETE requests, to delete more than one record\r\n     * @param {string} url - The URL for the API endpoint\r\n     * @param {Object} data - The data to be sent in the request body\r\n     * @param {string} antiForgeryToken - The anti-forgery token to be sent in the request header (if applicable)\r\n     * @returns {Promise<any>} - Promise that resolves with the API response object\r\n     */\r\n    public async deletes<T extends ApiResponse>(\r\n        url: string,\r\n        data: any,\r\n        antiForgeryToken: string | null\r\n    ): Promise<T> {\r\n        return this.apiRequest<T>('DELETE', url, data, null, antiForgeryToken);\r\n    }\r\n}\r\n\r\n// Export the ApiHelper class\r\nexport default ApiHelper;\r\n","import ApiHelper from '../../../../apis/api-helpers-async';\r\nimport { ApiDataResponse, ApiResponse } from '../../../../apis/api-response';\r\n\r\nconst errorMessage = 'An error occurred while deleting the links';\r\n\r\nclass LinksApis extends ApiHelper {\r\n    /**\r\n     * Deletes a collection of links\r\n     * @param linkIds The ids of the links to delete\r\n     * @param antiForgeryToken\r\n     * @param onSuccess The callback function to execute when the delete is successful\r\n     * @param onFailure The callback function to execute when the delete fails\r\n     * @returns\r\n     */\r\n    public async deleteLinksAsync(\r\n        linkIds: string[],\r\n        antiForgeryToken: string,\r\n        onSuccess: Function,\r\n        onFailure: Function\r\n    ): Promise<ApiDataResponse<string[]>> {\r\n        if (!linkIds || linkIds.length === 0) {\r\n            onFailure('No ids provided');\r\n        }\r\n\r\n        return this.deletes<ApiDataResponse<string[]>>(`/links/deletes`, linkIds, antiForgeryToken)\r\n            .then((response) => {\r\n                if (response.isSuccess) {\r\n                    onSuccess(response);\r\n                } else {\r\n                    onFailure(response);\r\n                }\r\n            })\r\n            .catch((error) => onFailure(error));\r\n    }\r\n}\r\n\r\nexport default LinksApis;\r\n","import { ApiDataResponse } from '@apis/api-response';\r\nimport { getAntiForgeryToken } from '@utils/dom/get-antiforgery-token';\r\nimport { initElement, initElements, ElementEvent } from '@utils/dom/init-element';\r\nimport { toggleCheckboxes } from '@utils/dom/toggle-checkboxes';\r\nimport WindowReload from '@utils/window/window-reload';\r\n\r\nimport { SearchLinksForm } from './components/_links-search-form';\r\n\r\nimport LinksApis from './apis';\r\n\r\n/**\r\n * Responsible for managing the Links > Index page\r\n */\r\nexport default class LinksPage {\r\n    pageContainer!: HTMLDivElement;\r\n\r\n    searchLinksForm!: SearchLinksForm;\r\n\r\n    deleteLinksForm!: HTMLFormElement;\r\n    deleteLinksButton!: HTMLButtonElement;\r\n    selectAllLinksButton!: HTMLButtonElement;\r\n\r\n    linksTable!: HTMLTableElement;\r\n\r\n    linkCheckBoxes: HTMLInputElement[] = [];\r\n\r\n    linksApis = new LinksApis();\r\n\r\n    constructor() {\r\n        if (!document.querySelector('#links-list-container')) {\r\n            console.error('Unable to find the page');\r\n            //TODO: ApplicationInsights.trackException(new Error('Unable to find the page'));\r\n            throw new Error('Unable to find the page');\r\n        }\r\n\r\n        this.initForm();\r\n    }\r\n\r\n    /**\r\n     * Handles when an individual checkbox is clicked.\r\n     */\r\n    private handleOnSingleCheckBoxClicked = (e: Event) => {\r\n        this.toggleDeleteButtonDisabledState();\r\n    };\r\n\r\n    /**\r\n     * Handles when the SelectAll button is clicked\r\n     * @param e\r\n     */\r\n    private handleOnSelectAllCheckboxesClicked = (e: Event) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        toggleCheckboxes(e, this.linkCheckBoxes);\r\n\r\n        this.toggleDeleteButtonDisabledState();\r\n    }\r\n\r\n    /**\r\n     * Handles when the Delete button is clicked\r\n     * @param e\r\n     */\r\n    private handleOnDeleteButtonClicked = (e: Event) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const antiForgeryToken = getAntiForgeryToken(this.deleteLinksForm);\r\n\r\n        const linksToDelete = this.linkCheckBoxes.filter((checkBox) => checkBox.checked) ?? [];\r\n\r\n        let linkIds =\r\n            (linksToDelete.map((link) => {\r\n                if (link.dataset.id && link.dataset.id !== undefined)\r\n                    return link.dataset.id;\r\n            }) as string[]) ?? [];\r\n\r\n        if (confirm('Are you sure you want to delete the selected links?')) {\r\n            this.linksApis.deleteLinksAsync(\r\n                linkIds,\r\n                antiForgeryToken,\r\n                this.onDeleteLinksSuccess,\r\n                this.onDeleteLinksFailure\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles when a successful call to the delete api endpoint occurs\r\n     * @param linkIds An array of link ids that were successfully deleted\r\n     */\r\n    private onDeleteLinksSuccess = (response: ApiDataResponse<string[]>) => {\r\n        if (response.isSuccess) {\r\n            if (response.data) {\r\n                const linkIds = response.data;\r\n                const linkIdsAsString = linkIds.length === 1 ? linkIds[0] : linkIds.join(', ');\r\n\r\n                alert(`The following links were deleted: ${linkIdsAsString}`);\r\n\r\n                WindowReload();\r\n            }\r\n            else {\r\n                alert('It seems that no links were deleted');\r\n            }\r\n        }\r\n        else {\r\n            alert(response.message ?? 'An error occurred while deleting the links');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles when an error occurs when calling the delete api endpoint\r\n     * @param error\r\n     */\r\n    private onDeleteLinksFailure = (error: Error): void => {\r\n        console.error(error);\r\n        //ApplicationInsights.trackException(new Error(error));\r\n        throw error;\r\n    };\r\n\r\n    /**\r\n     * Sets the disabled state of the delete button based on whether \r\n     * there is at least one checkbox selected or not\r\n     */\r\n    private toggleDeleteButtonDisabledState(): void {\r\n        this.deleteLinksButton.disabled =\r\n            (this.linkCheckBoxes.find((checkBox) => checkBox.checked) ?? null) === null;\r\n    };\r\n\r\n    /**\r\n     * Handles seltting up the SelectAll and Delete buttons\r\n     */\r\n    private initDeleteLinksForm(): void {\r\n        const deleteFormId = 'frmLinksDelete';\r\n        this.deleteLinksForm = initElement<HTMLFormElement>(document, `#${deleteFormId}`)!;\r\n        this.deleteLinksButton = this.deleteLinksButton = initElement<HTMLButtonElement>(\r\n            this.deleteLinksForm,\r\n            '#btnDeleteLinks',\r\n            { eventType: 'click', eventFunction: this.handleOnDeleteButtonClicked } as ElementEvent\r\n        );\r\n\r\n        this.toggleDeleteButtonDisabledState();\r\n\r\n        this.selectAllLinksButton = initElement<HTMLButtonElement>(\r\n            this.deleteLinksForm,\r\n            '#btnSelectLinks',\r\n            { eventType: 'click', eventFunction: this.handleOnSelectAllCheckboxesClicked } as ElementEvent\r\n        );\r\n    }\r\n\r\n    private initForm(): void {\r\n        this.pageContainer = initElement<HTMLDivElement>(document, '#links-list-container');\r\n\r\n        /* Search Links Form */\r\n        this.searchLinksForm = new SearchLinksForm();\r\n\r\n        /* Links Table */\r\n        this.linksTable = initElement<HTMLTableElement>(this.pageContainer, '#links-table');\r\n\r\n        this.linkCheckBoxes = initElements<HTMLInputElement>(\r\n            this.linksTable,\r\n            'input[name=\"selected-link\"]',\r\n            {\r\n                eventType: 'click',\r\n                eventFunction: this.handleOnSingleCheckBoxClicked\r\n            } as ElementEvent);\r\n\r\n        /* Delete Links Form */\r\n        this.initDeleteLinksForm();\r\n    }\r\n}\r\n","export function validateForm(formElements: HTMLFormControlsCollection): { isSuccess: boolean; message: string } | null {\r\n    if (!formElements) return { isSuccess: true, message: '' };\r\n    \r\n    const requiredElements = Array.from(formElements).filter(\r\n        (element) => element.hasAttribute('required') && element.tagName.toLowerCase() !== 'button'\r\n    ) as HTMLInputElement[];\r\n\r\n    let hasErrors = false;\r\n    let errorMsg = '';\r\n\r\n    // No elements marked as required were in the form\r\n    if (!requiredElements) return { isSuccess: true, message: '' };\r\n\r\n    if (requiredElements) {\r\n        requiredElements.forEach((element) => {\r\n            if (!element.checkValidity()) {\r\n                hasErrors = true;\r\n                element.classList.add('is-invalid');\r\n                errorMsg += `<li>${element.name} is required</li>`;\r\n            } else {\r\n                element.classList.remove('is-invalid');\r\n            }\r\n        });\r\n    }\r\n\r\n    if (hasErrors) {\r\n        errorMsg = `<ul>${errorMsg}</ul>`;\r\n    }\r\n\r\n    return { isSuccess: !hasErrors, message: errorMsg };\r\n}","import ApiHelper from '../../../../apis/api-helpers-async';\r\nimport { ApiResponse, ApiDataResponse } from '../../../../apis/api-response';\r\n\r\nimport { EditLinkRequest } from './editLinkRequest';\r\n\r\nconst errorMessage = 'An error occurred while deleting the links';\r\n\r\nclass LinkDetailsApis extends ApiHelper {\r\n    /**\r\n     * Deletes a collection of links\r\n     * @param ids The ids of the links to delete\r\n     * @param antiForgeryToken\r\n     * @param onSuccess The callback function to execute when the delete is successful\r\n     * @param onFailure The callback function to execute when the delete fails\r\n     * @returns\r\n     */\r\n    public async updateLinkAsync(link: EditLinkRequest,\r\n        antiForgeryToken: string,\r\n        onSuccess: Function,\r\n        onFailure: Function\r\n    ): Promise<{ isSuccess: boolean; message: string }> {\r\n\r\n        if (link.linkId) {\r\n            console.log('Cannot update Link: No id was provided');\r\n        }\r\n\r\n        const data = JSON.stringify(link);\r\n\r\n        return this.post(`/links/${link.linkId}/edit`, link, antiForgeryToken)\r\n            .then((response) => {\r\n                if (response.isSuccess) {\r\n                    onSuccess(response);\r\n                } else {\r\n                    onFailure(response.message ?? errorMessage);\r\n                }\r\n            })\r\n            .catch((error:Error) => onFailure(error));\r\n    }\r\n\r\n    public async activateLinkAsync(\r\n        linkId: string,\r\n        antiForgeryToken: string,\r\n        isActive: boolean,\r\n        onSuccess: Function,\r\n        onFailure: Function\r\n    ):Promise<ApiResponse> {\r\n        if (!(linkId?.trim())) {\r\n            onFailure('No id was provided');\r\n        }\r\n\r\n        return this.post(`/links/${linkId}/activate/${isActive}`, null, antiForgeryToken)\r\n            .then((response) => {\r\n                if (response.isSuccess) {\r\n                    onSuccess((response));\r\n                } else {\r\n                    onFailure(response.message ?? errorMessage);\r\n                }\r\n            })\r\n            .catch((error) => onFailure(error));\r\n    }\r\n\r\n    /**\r\n     * Deletes a single link\r\n     * @param linkIds The ids of the links to delete\r\n     * @param antiForgeryToken\r\n     * @param onSuccess The callback function to execute when the delete is successful\r\n     * @param onFailure The callback function to execute when the delete fails\r\n     * @returns\r\n     */\r\n    public async deleteLinkAsync(\r\n        linkId: string,\r\n        antiForgeryToken: string,\r\n        onSuccess: Function,\r\n        onFailure: Function\r\n    ): Promise<ApiDataResponse<string[]>> {\r\n        if (!(linkId?.trim())) {\r\n            onFailure('No id was provided');\r\n        }\r\n\r\n        return this.delete(`/links/${linkId}/delete`, antiForgeryToken)\r\n            .then((response) => {\r\n                if (response.isSuccess) {\r\n                    onSuccess((response));\r\n                } else {\r\n                    onFailure(response.message ?? errorMessage);\r\n                }\r\n            })\r\n            .catch((error) => onFailure(error));\r\n    }\r\n\r\n    /**\r\n     * Deletes a single link\r\n     * @param linkIds The ids of the links to delete\r\n     * @param antiForgeryToken\r\n     * @param onSuccess The callback function to execute when the delete is successful\r\n     * @param onFailure The callback function to execute when the delete fails\r\n     * @returns\r\n     */\r\n    public async unDeleteLinkAsync(\r\n        linkId: string,\r\n        antiForgeryToken: string,\r\n        onSuccess: Function,\r\n        onFailure: Function\r\n    ): Promise<ApiResponse> {\r\n        if (!(linkId?.trim())) {\r\n            onFailure('No id was provided');\r\n        }\r\n\r\n        return this.post(`/links/${linkId}/undelete`, null, antiForgeryToken)\r\n            .then((response : ApiResponse) => {\r\n                if (response.isSuccess) {\r\n                    onSuccess({\r\n                        isSuccess: true,\r\n                        message: `The link '${linkId} was Undeleted successfully'`,\r\n                    });\r\n                } else {\r\n                    onFailure(response.message ?? errorMessage);\r\n                }\r\n            })\r\n            .catch((error) => onFailure(error));\r\n    }\r\n}\r\n\r\nexport default LinkDetailsApis;\r\n","import { initElement } from '@utils/dom/init-element';\r\nimport { getAntiForgeryToken } from '@utils/dom/get-antiforgery-token';\r\nimport { validateForm } from '@utils/dom/validate-form';\r\nimport WindowsReload from '@utils/window/window-reload';\r\n\r\nimport LinkApis from '../apis';\r\nimport { EditLinkRequest } from '../apis/editLinkRequest';\r\n\r\ntype EditLinkEventTypes = 'Activate' | 'Deactivate' | 'Cancel' | 'Delete' | 'Undelete' | 'Save';\r\n\r\nexport class LinkEditForm {\r\n    formId = 'frmEditLink';\r\n\r\n    linkId: string = '';\r\n    isActive: boolean = false;\r\n    isDeleted: boolean = false;\r\n    isFlagged: boolean = false;\r\n\r\n    // Elements\r\n    // Note: Because I'm checking/throwing errors if the elements are not found,\r\n    // I'm using the non-null assertion operator (!) to say that they will not be null.\r\n    frmEditLink!: HTMLFormElement;\r\n\r\n    txtLinkTitle!: HTMLInputElement;\r\n    txtLinkDescription!: HTMLInputElement;\r\n    txtLinkDomain!: HTMLInputElement;\r\n    txtLinkTags!: HTMLInputElement;\r\n    txtLinkUrl!: HTMLInputElement;\r\n\r\n    btnSave!: HTMLButtonElement;\r\n    btnActivate!: HTMLButtonElement;\r\n    btnDelete!: HTMLButtonElement;\r\n    btnCancel!: HTMLButtonElement;\r\n\r\n    onEditChangedCallback?: Function | null;\r\n\r\n    linkApis = new LinkApis();\r\n\r\n    constructor(onEditChange?: Function | undefined) {\r\n        this.initForm(onEditChange);\r\n    }\r\n\r\n    //#region - Activate/Deactivate\r\n    /**\r\n     *  Sets the state of the Activate/Deactivate button based on the value.\r\n     * If the link is NOT active, the button will say \"Activate\" and be a primary button.\r\n     * If the link is active, the button will say \"Deactivate\" and be a secondary button.\r\n     * @param isLinkActive Whether or not the link is active.\r\n     */\r\n    private setActiveButtonState = (isLinkActive: boolean) => {\r\n        if (!isLinkActive) {\r\n            this.btnActivate.textContent = 'Activate';\r\n            this.btnActivate.classList.remove('btn-secondary');\r\n        }\r\n        else {\r\n            this.btnActivate.textContent = 'Deactivate';\r\n            this.btnActivate.classList.add('btn-secondary');\r\n        }\r\n    }\r\n\r\n    private handleOnActivateClick = (e: Event) => {\r\n        const isNowActive = !this.isActive;\r\n\r\n        const antiForgeryToken = getAntiForgeryToken(this.frmEditLink);\r\n\r\n        this.linkApis.activateLinkAsync(this.linkId, antiForgeryToken, isNowActive, this.onActivateSuccess, this.onActivateFailure);\r\n\r\n        this.isActive = isNowActive;\r\n\r\n        this.setActiveButtonState(isNowActive);\r\n    };\r\n\r\n    private onActivateSuccess = (response: { isSuccess: boolean; message: string }) => {\r\n        if (response.isSuccess) {\r\n            this.isActive = !this.isActive;\r\n            this.setActiveButtonState(this.isActive);\r\n\r\n            if (this.isActive)\r\n                this.handleOnEditChanged(true, response.message, 'Activate');\r\n            else\r\n                this.handleOnEditChanged(true, response.message, 'Deactivate');\r\n        }\r\n        else {\r\n            console.log('Ooops, how did we get here?')\r\n        }\r\n    }\r\n\r\n    private onActivateFailure = (error: Error) => {\r\n        console.error(error ?? 'An error occurred while trying to set the active state of the link');\r\n        this.handleOnEditChanged(false, error.toString(), 'Deactivate');\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region - Delete/Undelete\r\n\r\n    private setDeleteButtonState = (isLinkDeleted: boolean) => {\r\n        if (!isLinkDeleted) {\r\n            this.btnDelete.textContent = 'Delete';\r\n            this.btnDelete.classList.remove('btn-secondary');\r\n            this.btnDelete.classList.add('btn-danger');\r\n        }\r\n        else {\r\n            this.btnDelete.textContent = 'UnDelete';\r\n            this.btnDelete.classList.remove('btn-danger');\r\n            this.btnDelete.classList.add('btn-secondary');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles both Delete and Undelete actions.\r\n     * @param e\r\n     */\r\n    private handleOnDeleteClick = (e: Event) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const isNowDeleted = !this.isDeleted;\r\n\r\n        const antiForgeryToken = getAntiForgeryToken(this.frmEditLink);\r\n\r\n        this.isDeleted = isNowDeleted;\r\n\r\n        if (isNowDeleted)\r\n            this.linkApis.deleteLinkAsync(this.linkId, antiForgeryToken, this.handleOnDeleteSuccess, this.handleOnDeleteFail);\r\n        else\r\n            this.linkApis.unDeleteLinkAsync(this.linkId, antiForgeryToken, this.handleOnUnDeleteSuccess, this.handleOnUnDeleteFail);\r\n    };\r\n\r\n    /**\r\n     * Handles when the DELETE is successful\r\n     * @param response\r\n     */\r\n    private handleOnDeleteSuccess = (response: { isSuccess: boolean; message: string }) => {\r\n        if (response.isSuccess) {\r\n            this.isDeleted = false;\r\n            this.setDeleteButtonState(this.isDeleted);\r\n\r\n            this.handleOnEditChanged( true, response.message, 'Delete');\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Handles when the DELETE fails\r\n     * @param error\r\n     */\r\n    private handleOnDeleteFail = (error: Error) => {\r\n        console.error(error ?? 'An error occurred while trying to undelete the link');\r\n        this.handleOnEditChanged(false, error.toString(), 'Delete');\r\n    };\r\n\r\n    /**\r\n     * Handles when the UNDELETE is successful\r\n     * @param response\r\n     */\r\n    private handleOnUnDeleteSuccess = (response: { isSuccess: boolean; message: string }) => {\r\n        if (response.isSuccess) {\r\n            this.isDeleted = false;\r\n            this.setDeleteButtonState(this.isDeleted);\r\n\r\n            this.handleOnEditChanged(true, response.message, 'Undelete');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handles when the UNDELETE fails\r\n     * @param error\r\n     */\r\n    private handleOnUnDeleteFail = (error: Error) => {\r\n        console.error(error ?? 'An error occurred while trying to undelete the link');\r\n\r\n        this.handleOnEditChanged(false, error.toString(), 'Undelete');\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region - Save\r\n\r\n    private handleOnSaveClick = (e: Event) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const isFormValidated = validateForm(this.frmEditLink.elements)\r\n\r\n        if (!isFormValidated?.isSuccess) {\r\n            //this.displayMessage(isFormValidated?.isSuccess, isFormValidated?.message);\r\n\r\n            return;\r\n        }\r\n\r\n        const antiForgeryToken = getAntiForgeryToken(this.frmEditLink);\r\n\r\n        const link: EditLinkRequest = {\r\n            linkId: this.linkId,\r\n            title: this.txtLinkTitle.value,\r\n            description: this.txtLinkDescription.value,\r\n            domain: this.txtLinkDomain.value,\r\n            tags: this.txtLinkTags.value ? this.txtLinkTags.value.split(',').map(function (i) {\r\n                return i.trim();\r\n            }) : []\r\n        };\r\n\r\n        this.linkApis.updateLinkAsync(link, antiForgeryToken, this.handleOnSubmitLinkSuccess, this.handleOnSubmitLinkFail);\r\n    }\r\n\r\n    private handleOnSubmitLinkSuccess = (response: { isSuccess: boolean; message: string }) => {\r\n        this.handleOnEditChanged(response.isSuccess, response.message, 'Undelete');\r\n    }\r\n\r\n    private handleOnSubmitLinkFail = (error: Error) => {\r\n        this.handleOnEditChanged(false, error.message ?? 'And error occurred while trying to Save the link', 'Save');\r\n    }\r\n\r\n    private handleOnEditChanged = (isSuccess: boolean, message: string, eventType: EditLinkEventTypes) => {\r\n        if (this.onEditChangedCallback)\r\n            this.onEditChangedCallback({ isSuccess, message, eventType });\r\n\r\n    };\r\n\r\n    //#endregion\r\n\r\n    //#region - Cancel\r\n\r\n    private handleOnCancelClick = (e: Event) => {\r\n        WindowsReload();\r\n    }\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Initializes the elements on the Edit form. \r\n     * @param onEditChanged - The function to call when the form is changed.\r\n     */\r\n    private initForm(onEditChanged: Function | undefined): void {\r\n\r\n        this.frmEditLink = initElement<HTMLFormElement>(document, `#${this.formId}`)!;\r\n\r\n        if (!this.frmEditLink.getAttribute('data-link-id')) {\r\n            console.log('The form does not have a data-link-id attribute');\r\n            throw new Error('The form does not have a data-link-id attribute');\r\n        }\r\n        else {\r\n            this.linkId = this.frmEditLink.getAttribute('data-link-id')!;\r\n        }\r\n\r\n        this.isActive = this.frmEditLink.getAttribute('data-isactive') === 'true';\r\n        this.isDeleted = this.frmEditLink.getAttribute('data-isdeleted') === 'true';\r\n        this.isFlagged = this.frmEditLink.getAttribute('data-isflagged') === 'true';\r\n\r\n        this.txtLinkTitle = initElement<HTMLInputElement>(this.frmEditLink, '#title')!;\r\n        this.txtLinkDescription = initElement<HTMLInputElement>(this.frmEditLink, '#description')!;\r\n        this.txtLinkDomain = initElement<HTMLInputElement>(this.frmEditLink, '#domain')!;\r\n        this.txtLinkTags = initElement<HTMLInputElement>(this.frmEditLink, '#tags')!;\r\n        this.txtLinkUrl = initElement<HTMLInputElement>(this.frmEditLink, '#url')!;\r\n\r\n        this.btnActivate = initElement<HTMLButtonElement>(this.frmEditLink, '#btnActivate',\r\n            { eventType: 'click', eventFunction: this.handleOnActivateClick })!;\r\n        this.setActiveButtonState(this.isActive);\r\n\r\n        this.btnDelete = initElement<HTMLButtonElement>(this.frmEditLink, '#btnDelete',\r\n            { eventType: 'click', eventFunction: this.handleOnDeleteClick })!;\r\n        this.setDeleteButtonState(this.isDeleted);\r\n\r\n\r\n        this.btnCancel = initElement<HTMLButtonElement>(this.frmEditLink, '#btnCancel',\r\n            { eventType: 'click', eventFunction: this.handleOnCancelClick })!;\r\n\r\n        this.btnSave = initElement<HTMLButtonElement>(this.frmEditLink, '#btnSave',\r\n            { eventType: 'click', eventFunction: this.handleOnSaveClick })!;\r\n\r\n        this.onEditChangedCallback = onEditChanged ?? null;\r\n    }\r\n}","import { initElement } from \"../../../../utils/dom/init-element\";\r\n\r\nexport class LinkMetaPanel {\r\n\r\n    panel!: HTMLDivElement;\r\n\r\n    imgLinkImage!: HTMLImageElement;\r\n\r\n    txtDateSubmitted!: HTMLInputElement;\r\n    txtDateUpdated!: HTMLInputElement;\r\n    txtSubmittedBy!: HTMLInputElement;\r\n    txtCountLikes!: HTMLInputElement;\r\n    txtCountSaves!: HTMLInputElement;\r\n\r\n    txtMetaKeywords!: HTMLInputElement;\r\n\r\n    /**\r\n     * Swaps out the data-src for some known links, sucj as Google, for a nicer version.\r\n     * @param images An array of Image Elements\r\n     * @returns Nothing\r\n     * @remarks: Copied from website\r\n     */\r\n    private cleanseImage = (image: HTMLImageElement) => {\r\n\r\n        if (!image)\r\n            return;\r\n\r\n        const noImgFound = '/imgs/no-image-found.png';\r\n        let newSrc = '';\r\n\r\n        if (!image.src || !image.getAttribute(\"data-src\")) {\r\n            image.setAttribute(\"src\", noImgFound);\r\n            image.alt = \"Image has no src or data-src\";\r\n\r\n            return;\r\n        }\r\n\r\n        const dataSrc = image.getAttribute(\"data-src\") ?? '';\r\n\r\n        // Covers both http: and https:\r\n        if (dataSrc.startsWith('http')) {\r\n\r\n            if (dataSrc.indexOf('duckduckgo') >= 0) {\r\n\r\n                newSrc = '/imgs/duckduckgo-logo.jpg';\r\n\r\n            }\r\n            else if (dataSrc.indexOf('google') >= 0) {\r\n\r\n                newSrc = '/imgs/google-logo.jpg';\r\n\r\n            }\r\n            else if (dataSrc.indexOf('reddit') >= 0) {\r\n\r\n                newSrc = '/imgs/reddit-logo.png';\r\n\r\n            }\r\n            else {\r\n\r\n                newSrc = dataSrc;\r\n\r\n            }\r\n        }\r\n\r\n        try {\r\n            image.setAttribute(\"src\", newSrc);\r\n        } catch (err) {\r\n\r\n            console.error(`Error loading image from ${dataSrc}\\n${err}`);\r\n            image.setAttribute(\"src\", noImgFound);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    constructor() {\r\n        this.initForm();\r\n    }\r\n\r\n    private initForm(): void {\r\n        this.panel = initElement(document, '#link-meta-details');\r\n\r\n        this.imgLinkImage = initElement(this.panel, '#link-image');\r\n\r\n        this.txtDateSubmitted = initElement(this.panel, '#date-submitted');\r\n        this.txtDateUpdated = initElement(this.panel, '#date-updated');\r\n        this.txtSubmittedBy = initElement(this.panel, '#submitted-by');\r\n        this.txtCountLikes = initElement(this.panel, '#likes');\r\n        this.txtCountSaves = initElement(this.panel, '#saves');\r\n        this.txtMetaKeywords = initElement(this.panel, '#keywords');\r\n\r\n        this.cleanseImage(this.imgLinkImage);\r\n    }\r\n\r\n}","import { initElement } from '../../../utils/dom/init-element';\r\nimport { LinkEditForm } from './components/_link-edit-form';\r\nimport { LinkMetaPanel } from './components/_link-meta-panel';\r\n\r\nimport WindowReload from '../../../utils/window/window-reload';\r\n\r\n/**\r\n * Responsible for managing the Links > Details page\r\n */\r\nexport default class LinksDetailsPage {\r\n    editLinkForm!: LinkEditForm;\r\n    messagePanel!: HTMLDivElement;\r\n    metaPanel!: LinkMetaPanel;\r\n    pageContainer!: HTMLDivElement;\r\n\r\n    constructor() {\r\n        if (!document.getElementById('links-edit-container')) {\r\n            console.error('Unable to find the edit link page');\r\n            //TODO: ApplicationInsights.trackException(new Error('Unable to find the page'));\r\n            throw new Error('Unable to find the edit link page');\r\n        };\r\n\r\n        this.initForm();\r\n    };\r\n\r\n    private handleOnEditChanged = (response: { isSuccess: boolean, message: string, eventType: string }): void => {\r\n        if (response.isSuccess) {\r\n            //this.messagePanel.classList.add('success');\r\n                if (confirm(response.message ?? 'Updated successfully'))\r\n                    WindowReload();\r\n        }\r\n        else {\r\n            alert(response.message ?? 'An error occurred');\r\n        }\r\n    };\r\n\r\n\r\n    private initForm(): void {\r\n        this.pageContainer = initElement<HTMLDivElement>(document, '#links-edit-container');\r\n\r\n        this.editLinkForm = new LinkEditForm(this.handleOnEditChanged);\r\n\r\n        this.messagePanel = initElement<HTMLDivElement>(this.pageContainer, '#message')\r\n\r\n        this.metaPanel = new LinkMetaPanel();\r\n    };\r\n}\r\n","import { LinksPage } from './LinksPage';\r\nimport { LinksDetailsPage } from './LinkDetailsPage';\r\n\r\nexport default function Links() {\r\n    if (document.querySelector('#links-list-container')) {\r\n        const linksPage = new LinksPage();\r\n    }\r\n    else if (document.querySelector('#links-edit-container')) {\r\n        const linkDetailsPage = new LinksDetailsPage();\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const page = Links();\r\n});\r\n"],"names":["getAntiForgeryToken","parent","antiForgeryInput","antiForgeryToken","initElement","selector","elementEvent","callBack","element","e","initElements","elements","toggleCheckboxes","checkBoxes","doSelected","toggledCheckboxes","checkBox","WindowReload","SearchLinksForm","__publicField","target","url","ApiHelper","method","data","params","headers","queryParams","bodyData","response","contentType","responseData","error","value","val","LinksApis","linkIds","onSuccess","onFailure","LinksPage","link","linkIdsAsString","deleteFormId","validateForm","formElements","requiredElements","hasErrors","errorMsg","errorMessage","LinkDetailsApis","linkId","isActive","LinkEditForm","onEditChange","LinkApis","isLinkActive","isNowActive","isLinkDeleted","isNowDeleted","isFormValidated","i","isSuccess","message","eventType","WindowsReload","onEditChanged","LinkMetaPanel","image","noImgFound","newSrc","dataSrc","err","LinksDetailsPage","Links"],"mappings":"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"}