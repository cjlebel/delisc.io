@page "/links"

@using MediatR
@using Deliscio.Modules.Links.Common.Models
@using Deliscio.Modules.Links.MediatR.Queries
@using System.Net
@using Deliscio.Core.Models
@using Microsoft.AspNetCore.WebUtilities

@rendermode InteractiveServer

@inject IMediator Mediator
@inject NavigationManager NavManager

<h3>Links</h3>

@if (IsError)
{
    <div class="text-danger">@Message</div>
}
else if (IsError is false && !string.IsNullOrWhiteSpace(Message))
{
    <div class="text-success">@Message</div>
}

<div class="container">
    @if (Links == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            @* Have Search go to /links?search=term instead *@
            <form method="post" @onsubmit="Search" @formname="starship-plain-form">
                <AntiforgeryToken />
                <div class="input-group mb-3">
                    <input type="text"
                           class="form-control"
                           placeholder="Search ..."
                           @bind-value="SearchTerm"
                           aria-label="Search ..."
                           aria-describedby="button-search" />
                    <button id="button-search" class="btn btn-outline-secondary" type="submit">Search</button>
                </div>
            </form>
        </div>
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Title</th>
                    <th>Domain</th>
                    <th>Created</th>
                    <th>Updated</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var link in Links)
                {
                    var tags = string.Empty;

                    foreach (var tag in link.Tags)
                    {
                        tags += $"<a href=\"/links?t={tag.Name}\">{tag.Name}</a>, ";
                    }

                    tags = tags.TrimEnd(',').TrimEnd(' ');

                    var title = link.Title.Length > 50 ? link.Title.Substring(0, 47) + "..." : link.Title;

                    <tr>
                        <td>
                            <a href="/links/details/@link.Id">@title</a>
                        </td>
                        <td>
                            <a href="@GetUrlForDomain(link.Domain)">@link.Domain</a>
                        </td>
                        <td>
                            @link.DateCreated.ToLocalTime().DateTime
                        </td>
                        <td>
                            @link.DateUpdated.ToLocalTime().DateTime
                        </td>
                    </tr>
                    <tr style="border-bottom: 0px">
                        <td colspan="4">
                            Tags:
                            @for (var t = 0; t < link.Tags.Count; t++)
                            {
                                var tag = link.Tags[t];
                                var tagUrl = GetUrlForTag(tag.Name);

                                <a href="@tagUrl">
                                    <span class="badge bg-primary">@tag.Name</span>
                                </a>
                                <text>&nbsp;</text>
                            }
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    #region - Properties -
    private bool IsError { get; set; }
    private string Message { get; set; } = "";

    private LinkItem[]? Links { get; set; }

    [Parameter]
    public int PageNo { get; set; } = 1;

    private int PageSize { get; set; } = 50;


    private int TotalPages { get; set; }

    private int TotalResults { get; set; }



    [SupplyParameterFromForm]
    public string SearchTerm { get; set; } = "";

    public string[] Tags { get; set; } = Array.Empty<string>();

    #endregion

    #region - Events -
    private void Search()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
            return;

        var searchQuery = WebUtility.UrlEncode(SearchTerm);

        // Redirect to /links?search=term so that we can preserve history
        NavManager.NavigateTo($"/links?q={searchQuery}");
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SearchForLinks();
        }
        catch (Exception e)
        {
            IsError = true;
            Message = e.Message;
        }

        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (!string.IsNullOrWhiteSpace(uri.Query))
        {
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var query))
            {
                SearchTerm = query.ToString();
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("t", out var tags))
            {
                tags = WebUtility.UrlDecode(tags.ToString().Replace('+', ' '));

                var tagsArray = tags.ToString().Split(',');

                Tags = tagsArray.Distinct().Order().ToArray();
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("p", out var page))
            {
                int.TryParse(page, out var pageNo);

                PageNo = Math.Max(1, pageNo);
            }
        }

        await base.SetParametersAsync(parameters);
    }

    #region - Privates -
    private async Task PageChanged(int pageNo)
    {
        PageNo = pageNo;

        await OnInitializedAsync();
    }

    /// <summary>
    /// Gets the search url with this domain.
    /// </summary>
    /// <param name="domain"></param>
    /// <returns></returns>
    private string GetUrlForDomain(string domain)
    {
        return $"/links?d={WebUtility.UrlEncode(domain)}";
    }

    /// <summary>
    /// Gets the url for an individual tag.
    /// If the user has already filtered by one or more tags, then there are used and this one is appended to that list.
    /// </summary>
    /// <param name="tag">The tag to create the url with</param>
    /// <returns></returns>
    private string GetUrlForTag(string tag)
    {
        var tagsArr = Tags.Concat(new[] { tag });
        tagsArr = tagsArr.Distinct().Order().Select(t=>WebUtility.UrlEncode(t).Replace(' ', '+')).ToArray();

        var tags = string.Join(',', tagsArr);

        return $"/links?t={tags}";
    }

    private async Task SearchForLinks()
    {
        try
        {
            //rslts = apiClient.GetLinksSearchResultsAsync(SearchTerm, null, PageNo, PageSize).Result;
            // var pageOfLinks = await apiClient!.GetLinksSearchResultsAsync(SearchTerm, null, PageNo, PageSize);

            // rslts = await LinksService.FindAsync(SearchTerm, PageNo, PageSize);

            var tags = string.Join(',', Tags);
            var rslts = new PagedResults<LinkItem>();

            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                var query = new FindLinksQuery(SearchTerm, 1, PageSize);
                rslts = await Mediator!.Send(query);
            }
            else if (Tags.Length > 0)
            {
                var query = new GetLinksByTagsQuery(PageNo, PageSize, tags);
                rslts = await Mediator!.Send(query);
            }
            else
            {
                var query = new FindLinksQuery(string.Empty, 1, PageSize);
                rslts = await Mediator!.Send(query);
            }


            if (rslts.IsError)
            {
                IsError = true;
                Message = rslts.Message;
            }
            else
            {
                Links = rslts.Results.ToArray();
                TotalPages = rslts.TotalPages;
                TotalResults = rslts.TotalResults;
            }
        }
        catch (Exception e)
        {
            IsError = true;
            Message = e.Message;
        }
    }
    #endregion
}